<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Shawn D'silva</title>
 <link href="/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2018-10-28T16:58:19+05:30</updated>
 <id></id>
 <author>
   <name>Shawn D'silva</name>
   <email></email>
 </author>

 
 <entry>
   <title>Writing the Startup code and Linker Script for the TM4C from scratch</title>
   <link href="/2018/10/28/Writing-the-Startup-code-and-Linker-Script-for-the-TM4C-from-scratch/"/>
   <updated>2018-10-28T00:00:00+05:30</updated>
   <id>/2018/10/28/Writing-the-Startup-code-and-Linker-Script-for-the-TM4C-from-scratch</id>
   <content type="html">&lt;p&gt;Nearly every ARM Cortex-M needs needs a &lt;strong&gt;startup code&lt;/strong&gt; file to define it’s  &lt;strong&gt;Main Stack Pointer&lt;/strong&gt;, &lt;strong&gt;Reset Handler&lt;/strong&gt; and &lt;strong&gt;Vector Table&lt;/strong&gt; and a &lt;strong&gt;linker script&lt;/strong&gt; telling it to place which sections into which parts of memory,these two files are crucial,without which even a simple blinky program cannot be run.
&lt;br /&gt;
Usually,the vendor provided versions of these files are sufficient,but the TI provided ones require a ~500MB download,and registration on the TI website,to top it all off,nearly every file in the TI package has this license in it :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Texas Instruments (TI) is supplying this software for use solely and
exclusively on TI’s microcontroller products. The software is owned by
TI and/or its suppliers, and is protected under applicable copyright
laws. You may not combine this software with “viral” open-source
software in order to form a larger program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which is why i decided to write my own &lt;strong&gt;Open Source&lt;/strong&gt; Startup code and Linker Script,and document how both of them work on this blog.&lt;/p&gt;

&lt;!--more--&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;startup-code&quot;&gt;Startup Code&lt;/h1&gt;

&lt;p&gt;First we start off with the Startup code,which has two main functions&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Initializing the Vector Table with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Main Stack Pointer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Implementing the &lt;code class=&quot;highlighter-rouge&quot;&gt;Reset_Handler&lt;/code&gt; function,which consists of,
    &lt;ul&gt;
      &lt;li&gt;Copying &lt;code class=&quot;highlighter-rouge&quot;&gt;.data&lt;/code&gt; sections of the memory from Internal Flash to Internal SRAM&lt;/li&gt;
      &lt;li&gt;Setting &lt;code class=&quot;highlighter-rouge&quot;&gt;.bss&lt;/code&gt; values to 0&lt;/li&gt;
      &lt;li&gt;And finally pointing to the &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; function of your program,after these initialization tasks are done
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;writing--startuph&quot;&gt;Writing  Startup.h&lt;/h2&gt;
&lt;p&gt;The Vector Table is an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;void&lt;/code&gt; functions which is placed into a section in the memory,namely 
&lt;code class=&quot;highlighter-rouge&quot;&gt;.vector_table&lt;/code&gt; in this case,this name has to also be reflected in the linker script.
The functions each map to an Interrupt index-wise,which is hardcoded into the microcontroller itself,
the interrupt vector table is defined in the TM4C123GH6PM data sheet,pages 147-149,and we will be using it to write our own vector table
&lt;br /&gt;
We will be having around ~120 or so function prototypes in our vector table,so we need to aliase undefined function prototypes to a default handler function,we do this by defining a macro in our 
&lt;code class=&quot;highlighter-rouge&quot;&gt;startup.h&lt;/code&gt; file like so
&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define DEFAULT __attribute__((weak, alias(&quot;Default_Handler&quot;)))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This macro, &lt;code class=&quot;highlighter-rouge&quot;&gt;DEFAULT&lt;/code&gt; will expand to &lt;code class=&quot;highlighter-rouge&quot;&gt;__attribute__((weak, alias(&quot;Default_Handler&quot;)))&lt;/code&gt; which is a command to the GNU GCC compiler to aliase a given function to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Default_Handler&lt;/code&gt; if it is not defined&lt;/p&gt;

&lt;p&gt;For example,we are going to explicitly define the &lt;code class=&quot;highlighter-rouge&quot;&gt;Reset_Handler&lt;/code&gt; function prototype in the &lt;code class=&quot;highlighter-rouge&quot;&gt;startup.c&lt;/code&gt; file,but not the &lt;code class=&quot;highlighter-rouge&quot;&gt;NMI_Handler&lt;/code&gt; or other functions for now,so we mark them as &lt;code class=&quot;highlighter-rouge&quot;&gt;DEFAULT&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reset_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NMI_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SVC_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DebugMonitor_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PendSV_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SysTick_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We then start writing the ISR function prototypes&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIOPortA_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIOPortB_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIOPortC_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIOPortD_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIOPortE_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UART0_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UART1_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPI0_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I2C0_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWM0Fault_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWM0Generator0_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.........&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The rest of the ISR prototypes can be viewed on my &lt;a href=&quot;https://github.com/shawn-dsilva/tm4c-linux-template.git&quot;&gt;Github Repo(tm4c-linux-template)&lt;/a&gt;,these prototypes conform to the &lt;strong&gt;Interrupt
Vector Table&lt;/strong&gt; interrupts from the datasheet&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
These function prototypes are of return type &lt;code class=&quot;highlighter-rouge&quot;&gt;void&lt;/code&gt;,and standard arrays cannot be declared as void,so we need to define new types for these&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;*element_t&lt;/code&gt; is a pointer passed to void function and cast as void
&lt;br /&gt;
next we define a &lt;code class=&quot;highlighter-rouge&quot;&gt;union&lt;/code&gt; for our main stack pointer and our ISRs&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;element_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack_top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector_table_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void *stack_top&lt;/code&gt; is a pointer to the top of the stack,and the 0th element of the vector table.
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;element_t isr&lt;/code&gt; stands for the void functions that will be added to the vector table&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Lastly,we have to declare external variables,mainly the sections,and the &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; program entry point&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stack_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_etext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_edata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_bss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_ebss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;here the &lt;code class=&quot;highlighter-rouge&quot;&gt;extern&lt;/code&gt; keyword simply tells to compiler to look for these keywords in another file external to this,the &lt;code class=&quot;highlighter-rouge&quot;&gt;uint32_t&lt;/code&gt; means an unsigned,32 bit integer,to dispel ambiquity of int sizes on different architectures.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;int main(void)&lt;/code&gt; is the entry point to your &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; program.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;_stack_ptr&lt;/code&gt; is the pointer to the top of the stack,i.e the last address of RAM,this is defined in the linker script.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;_data&lt;/code&gt; is the start of the &lt;code class=&quot;highlighter-rouge&quot;&gt;.data&lt;/code&gt; section,and &lt;code class=&quot;highlighter-rouge&quot;&gt;_edata&lt;/code&gt; is the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;.data&lt;/code&gt; section,same convention applies to the other section variables too.&lt;/p&gt;

&lt;h2 id=&quot;writing-startupc&quot;&gt;Writing Startup.c&lt;/h2&gt;

&lt;p&gt;We start by including our &lt;code class=&quot;highlighter-rouge&quot;&gt;startup.h&lt;/code&gt; header file with out definitions and the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;stdint.h&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdint.h&amp;gt;
#include &quot;startup.h&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next we direct the compiler to place the following vector table into the section &lt;code class=&quot;highlighter-rouge&quot;&gt;.vector_table&lt;/code&gt; 
in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.data&lt;/code&gt; segment&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.vector_table&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now we define our vector table like so&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector_table_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack_top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_stack_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Reset_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        
&lt;span class=&quot;n&quot;&gt;NMI_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          
&lt;span class=&quot;n&quot;&gt;HardFault_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;MemManageFault_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BusFault_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           
&lt;span class=&quot;n&quot;&gt;UsageFault_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                          
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                          
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                          
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                          
&lt;span class=&quot;n&quot;&gt;SVC_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                
&lt;span class=&quot;n&quot;&gt;DebugMonitor_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                          
&lt;span class=&quot;n&quot;&gt;PendSV_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;             
&lt;span class=&quot;n&quot;&gt;SysTick_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            
&lt;span class=&quot;n&quot;&gt;GPIOPortA_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              
&lt;span class=&quot;n&quot;&gt;GPIOPortB_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              
&lt;span class=&quot;n&quot;&gt;GPIOPortC_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              
&lt;span class=&quot;n&quot;&gt;GPIOPortD_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              
&lt;span class=&quot;n&quot;&gt;GPIOPortE_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              
&lt;span class=&quot;n&quot;&gt;UART0_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                  
&lt;span class=&quot;n&quot;&gt;UART1_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                  
&lt;span class=&quot;n&quot;&gt;SPI0_ISR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                   
    &lt;span class=&quot;cm&quot;&gt;/*MORE ISRS FOLLOW FROM HERE */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The 0th element,&lt;code class=&quot;highlighter-rouge&quot;&gt;{.stack_top = &amp;amp;_stack_ptr}&lt;/code&gt; assigns the  Main Stack Pointer defined in the Linker Script, &lt;code class=&quot;highlighter-rouge&quot;&gt;_stack_ptr&lt;/code&gt;
to the union element &lt;code class=&quot;highlighter-rouge&quot;&gt;.stack_top&lt;/code&gt; defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;vector_table_t&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The 1st element is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Reset_Handler&lt;/code&gt;,that is called when the &lt;RESET&gt; Button on the microcontroller is pressed,or the reset flag is set
&lt;br /&gt;&lt;/RESET&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally we define the &lt;code class=&quot;highlighter-rouge&quot;&gt;Reset_Handler&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Default_Hanlder&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Reset_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


  &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_etext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_edata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_bss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ebss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this function,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Two pointers are declared, &lt;code class=&quot;highlighter-rouge&quot;&gt;*src&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*dest&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*src&lt;/code&gt; is set to the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;_etext&lt;/code&gt;,and in the first loop &lt;code class=&quot;highlighter-rouge&quot;&gt;*dest&lt;/code&gt;
is set to the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;_data&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Till &lt;code class=&quot;highlighter-rouge&quot;&gt;dest&lt;/code&gt; reaches the end of &lt;code class=&quot;highlighter-rouge&quot;&gt;edata&lt;/code&gt; it will loop and copy the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;*src&lt;/code&gt; into it&lt;/li&gt;
  &lt;li&gt;This is copying the data from &lt;code class=&quot;highlighter-rouge&quot;&gt;.data&lt;/code&gt; residing on the Flash,to the RAM&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dest&lt;/code&gt; is now set to the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;_bss&lt;/code&gt; and every element of &lt;code class=&quot;highlighter-rouge&quot;&gt;dest&lt;/code&gt;,i.e &lt;code class=&quot;highlighter-rouge&quot;&gt;_bss&lt;/code&gt; is now being set to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Lastly,your &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; is called,and control handed over to it
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Default_Handler&lt;/code&gt; is also defined here,and it just infinitely loops when called&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Default_Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;With this,we are finally done writing the startup code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The rest of the code can be viewed on my &lt;a href=&quot;https://github.com/shawn-dsilva/tm4c-linux-template.git&quot;&gt;&lt;strong&gt;Github Repo(tm4c-linux-template)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting started with the TM4C Launchpad on Linux</title>
   <link href="/2018/10/17/Getting-Started-with-TM4C-Launchpad-On-Linux/"/>
   <updated>2018-10-17T00:00:00+05:30</updated>
   <id>/2018/10/17/Getting-Started-with-TM4C-Launchpad-On-Linux</id>
   <content type="html">&lt;p&gt;This is a guide to getting up-and-running to develop firmware for the &lt;strong&gt;TM4C123GH6PM&lt;/strong&gt; evaluation board from Texas Instruments on a Linux based system.&lt;/p&gt;

&lt;p&gt;The TM4C was my first microcontroller,and i found it very uninteresting to use a bulky IDE like Keil or IAR EWARM that abstracts so much from me,I checked various blog posts about using &lt;strong&gt;GCC&lt;/strong&gt; and &lt;strong&gt;Make&lt;/strong&gt; to develop firmware for this board,but the instructions were always outdated.&lt;/p&gt;

&lt;p&gt;The steps here are tested on an &lt;strong&gt;Ubuntu 18.04 LTS&lt;/strong&gt; system,but should work on any other Linux based system&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;To start writing firmware for the TM4C we need:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A text editor like vim or vscode whatever is your preference&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A compiler/assembler/linker package like &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc-arm-none-eabi&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Files specific to this board like a linker script &lt;code class=&quot;highlighter-rouge&quot;&gt;*.ld&lt;/code&gt; file and a &lt;code class=&quot;highlighter-rouge&quot;&gt;startup.c&lt;/code&gt; file&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A flasher program,I use &lt;code class=&quot;highlighter-rouge&quot;&gt;lm4flash&lt;/code&gt; in this guide,although OpenOCD may also be used&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;toolchain-installation&quot;&gt;Toolchain installation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;.First we install the dependencies needed by our tool chain&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install flex bison libgmp3-dev libmpfr-dev libncurses5-dev libmpc-dev autoconf texinfo build-essential libftdi-dev python-yaml zlib1g-dev libusb-1.0-0-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;. Then we install the &lt;strong&gt;GCC for ARM&lt;/strong&gt; package&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install gcc-arm-none-eabi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;. And finally the &lt;code class=&quot;highlighter-rouge&quot;&gt;lm4flash&lt;/code&gt; flashing tool&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/utzig/lm4tools.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;lm4tools/lm4flash
make
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;cp lm4flash /usr/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;. Next, create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;61.dialout.rules&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/udev/rules.d&lt;/code&gt;
    with this line inside it &lt;code class=&quot;highlighter-rouge&quot;&gt;SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;1cbe&quot;,
    ATTRS{idProduct}==&quot;00fd&quot;, MODE=&quot;0666&quot;&lt;/code&gt;  This is to allow any program to read or write to your TM4C 		  Launchpad board,i.e you will not have
    to use &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; every time.
    Now restart your PC&lt;/p&gt;

&lt;h2 id=&quot;building-and-flashing-a-basic-blinkyc-program-to-the-board&quot;&gt;Building and flashing a basic Blinky.c program to the board&lt;/h2&gt;

&lt;p&gt;I have already created a template for the TM4C,you just have to clone it from GitHub&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/shawn-dsilva/tm4c-linux-template.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This template contains a skeleton directory of folders,a &lt;code class=&quot;highlighter-rouge&quot;&gt;blinky.c&lt;/code&gt; file,a &lt;code class=&quot;highlighter-rouge&quot;&gt;startup.c&lt;/code&gt; file and a linker script for the TM4C&lt;/p&gt;

&lt;p&gt;Once cloned,&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;tm4c-linux-template&lt;/code&gt; and run &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;you can change the name of the final binary by setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT&lt;/code&gt; variable in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt; to whatever name you want to use,by default &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT = main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;once you run &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; this will be the directory structure:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── bin
│   ├── main.bin
│   └── main.elf
├── inc
│   └── startup.h
├── ld
│   └── TM4C123GH6PM.ld
├── libs
│   └── startup.c
├── Makefile
├── obj
│   ├── main.d
│   ├── main.o
│   ├── startup.d
│   └── startup.o
├── README.md
└── src
    └── main.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Here,&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; contains your Source files,i.e &lt;code class=&quot;highlighter-rouge&quot;&gt;main.c&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;libs&lt;/code&gt; contains your library source files,i.e &lt;code class=&quot;highlighter-rouge&quot;&gt;startup.c&lt;/code&gt;,that are used by the main program&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;inc&lt;/code&gt; contains your &lt;code class=&quot;highlighter-rouge&quot;&gt;*.h&lt;/code&gt; Header files,like &lt;code class=&quot;highlighter-rouge&quot;&gt;startup.h&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt; contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;*.o&lt;/code&gt; object files and &lt;code class=&quot;highlighter-rouge&quot;&gt;*.d&lt;/code&gt; dependency files&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt; contains an ELF executable &lt;code class=&quot;highlighter-rouge&quot;&gt;main.elf&lt;/code&gt;,this contains debugging symbols used by  the &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb&lt;/code&gt; debugger,and &lt;code class=&quot;highlighter-rouge&quot;&gt;main.bin&lt;/code&gt;,the final binary that is stripped off the debugging symbols and will be flashed to your board&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;make flash&lt;/code&gt; to invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;lm4flash&lt;/code&gt; and burn your &lt;code class=&quot;highlighter-rouge&quot;&gt;main.bin&lt;/code&gt; binary to the board,press the RESET button on your board,and hold SW1 to cause the red LED on board to blink as long as it is pressed&lt;/p&gt;

&lt;p&gt;Additional library and driver files for this board can be acquired by downloading the &lt;code class=&quot;highlighter-rouge&quot;&gt;SW-TM4C-2.1.4.178.exe&lt;/code&gt; package from this 
&lt;a href=&quot;http://software-dl.ti.com/tiva-c/SW-TM4C/latest/index_FDS.html&quot;&gt;TI Website here&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 

</feed>
